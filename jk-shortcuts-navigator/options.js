// Generated by CoffeeScript 1.3.3
(function() {
  var OptionPane, SiteCollection, SiteModel, SiteView, Sites, defaultJSON,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SiteModel = (function(_super) {

    __extends(SiteModel, _super);

    function SiteModel() {
      return SiteModel.__super__.constructor.apply(this, arguments);
    }

    SiteModel.prototype.valid_keys = ['selectors', 'search_selector', 'paginator_selector_next', 'paginator_selector_prev', 'allowSubdomains', 'liveUpdateElement', 'infiniteScroll'];

    SiteModel.prototype.getOpts = function() {
      return this.get('opts');
    };

    return SiteModel;

  })(Backbone.Model);

  SiteCollection = (function(_super) {

    __extends(SiteCollection, _super);

    function SiteCollection() {
      return SiteCollection.__super__.constructor.apply(this, arguments);
    }

    SiteCollection.prototype.model = SiteModel;

    SiteCollection.prototype.localStorage = new Backbone.LocalStorage("JKSites");

    return SiteCollection;

  })(Backbone.Collection);

  Sites = new SiteCollection();

  defaultJSON = '{\n  "selectors":undefined,\n  "search_selector":undefined,\n  "paginator_selector_next":undefined,\n  "paginator_selector_prev":undefined,\n  "liveUpdateElement"\n  "allowSubdomains":undefined,\n  "infiniteScroll":undefined\n}';

  SiteView = (function(_super) {

    __extends(SiteView, _super);

    function SiteView() {
      return SiteView.__super__.constructor.apply(this, arguments);
    }

    SiteView.prototype.tagName = 'li';

    SiteView.prototype.events = {
      'click .title': 'editSite',
      'click .savesite': 'saveSite',
      'click .removesite': 'removeSite'
    };

    SiteView.prototype.initialize = function(options) {
      this.addnew = options.addnew;
      if (this.model) {
        this.model.bind('change', this.render, this);
        return this.model.bind('destroy', this.remove, this);
      }
    };

    SiteView.prototype.render = function() {
      var context, html, opts;
      if (this.addnew) {
        opts = defaultJSON;
      } else {
        opts = this.model.getOptsString();
      }
      context = {
        addnew: this.addnew,
        opts: opts
      };
      if (this.model) {
        _.extend(context, this.model.toJSON());
      }
      html = Handlebars.templates.siteitem(context);
      this.$el.html(html);
      if (this.addnew) {
        this.$el.addClass('addnew');
      }
      return this;
    };

    SiteView.prototype.editSite = function() {
      if (this.editMode || this.addnew) {
        return;
      }
      this.editMode = true;
      return this.$el.addClass('editable');
    };

    SiteView.prototype.saveSite = function() {
      var values;
      values = {
        site: this.$('input[name=site]').val()
      };
      if (!this.model) {
        this.model = Sites.create(values);
      } else {
        this.model.set(values);
        this.model.save();
      }
      this.editMode = false;
      this.$el.removeClass('editable');
      if (this.addnew) {
        return this.remove();
      }
    };

    SiteView.prototype.removeSite = function() {
      if (this.model) {
        return this.model.destroy();
      } else {
        return this.remove();
      }
    };

    return SiteView;

  })(Backbone.View);

  OptionPane = (function(_super) {

    __extends(OptionPane, _super);

    function OptionPane() {
      return OptionPane.__super__.constructor.apply(this, arguments);
    }

    OptionPane.prototype.el = 'body';

    OptionPane.prototype.events = {
      'click .addsite': 'addSite'
    };

    OptionPane.prototype.initialize = function() {
      Sites.bind('add', this.addOne, this);
      Sites.bind('reset', this.addAll, this);
      Sites.bind('all', this.render, this);
      return Sites.fetch();
    };

    OptionPane.prototype.addOne = function(site) {
      var view;
      view = new SiteView({
        model: site
      });
      return this.$(".customsites").prepend(view.render().el);
    };

    OptionPane.prototype.addAll = function() {
      return Sites.each(this.addOne);
    };

    OptionPane.prototype.addSite = function() {
      var view;
      view = new SiteView({
        addnew: true
      });
      return this.$(".customsites").prepend(view.render().el);
    };

    return OptionPane;

  })(Backbone.View);

  $(function() {
    var options;
    return options = new OptionPane();
  });

}).call(this);
